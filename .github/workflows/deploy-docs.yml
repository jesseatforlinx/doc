name: Build and Deploy Docs

on:
  push:
    branches:
      - generate-pdf-feature
    paths:
      - 'platform/**/**/*.md' # 只在 Markdown 文件变动时触发
      - 'platform/**/images/**/**'      
      - 'scripts/**'
      - '.github/workflows/**'     
  workflow_dispatch:

jobs:
  build-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 授予写入权限，以便提交更改

    steps:
    # 1 Checkout 仓库
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # 获取所有历史，以便进行 diff

    # 2 设置 Python 环境
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # 3 安装Python依赖
    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install requests      

    # 4 获取本次 push 的变化 Markdown 文件
    - name: Detect changed Markdown files & image files
      id: detect_md
      shell: bash
      run: |
        echo "::group::Detect changed .md files"
        changed=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '\.md$|^platform/.*/.*/images/.*\.(png|jpg|jpeg)$' || true)
        echo "Changed md/image files:"
        echo "$changed"
        echo "::endgroup::"

        # 将多行路径写入环境变量 CHANGED_FILES
        if [[ -n "$changed" ]]; then          
          echo "CHANGED_FILES<<EOF" >> "$GITHUB_ENV"
          echo "$changed" >> "$GITHUB_ENV"
          echo "EOF" >> "$GITHUB_ENV"
        fi

    # 5 处理变化的 Markdown 文件（抓取图片 + 路径修改）
    - name: Process changed Markdown files
      shell: bash
      run: |
          if [[ -z "$CHANGED_FILES" ]]; then
            echo "No changed Markdown files."
            exit 0
          fi

          echo "Processing changed Markdown files..."
          # 逐行读取环境变量
          while IFS= read -r f; do
            # 忽略空行
            [[ -z "$f" ]] && continue
            if [ -f "$f" ]; then
              echo "📄 Processing $f"
              python ./scripts/process_md_images.py "$f"
            else
              echo "⚠️ File not found: $f"
            fi
          done <<< "$CHANGED_FILES"

    # 6 提交并推送更新
    - name: Commit and push changes
      shell: bash
      run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add .

          if ! git diff --cached --quiet; then
            git commit -m "Auto-update local image paths for changed md files"
            git push origin HEAD
          else
            echo "No changes to commit."
          fi        

    # 7 构建 homepage（必选）
    - name: Build homepage
      run: |
        mkdir -p docs_build
        sphinx-build -b html ./homepage ./docs_build

    # 8 构建 platform 子项目
    - name: Build platform docs
      run: |
        for project in platform/*/*; do
          if [ -f "$project/conf.py" ]; then
            echo "Building $project ..."
            project_name=$(basename $(dirname "$project"))
            platform_name=$(basename "$project")
            outdir="docs_build/$project_name/$platform_name"
            mkdir -p "$outdir"
            sphinx-build -b html "$project" "$outdir"
          fi
        done
    
    # 9 安装Latex依赖包
    - name: Install Latex(PDF) Dependencies
      run: |
        if [[ -z "$CHANGED_FILES" ]]; then
            echo "No md/image file changes detected, did not install PDF dependencies."
            exit 0
        fi
        sudo apt install -y \
        texlive-latex-extra \
        texlive-fonts-extra \
        texlive-xetex \
        latexmk \
        fonts-freefont-ttf \
        texlive-lang-chinese \
        fonts-noto-color-emoji

    # 10 生成PDF文档
    - name: Build PDF      
      run: |
        if [[ -z "$CHANGED_FILES" ]]; then
            echo "No changed Markdown files, did not build PDF"
            exit 0
        fi      
        bash scripts/generate_pdf.sh

    # 11 清理 /en/
    - name: Remove /en/ from sitemap URLs
      run: |
        for sm in docs_build/*/*/sitemap.xml; do
          if [ -f "$sm" ]; then
            echo "Cleaning $sm ..."
            sed -i 's#/en/#/#g' "$sm"
          fi
        done

    # 12 生成总 sitemap_index.xml
    - name: Generate sitemap_index.xml
      run: |
        echo '<?xml version="1.0" encoding="UTF-8"?>' > docs_build/sitemap_index.xml
        echo '<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' >> docs_build/sitemap_index.xml

        # 遍历所有子项目的 sitemap.xml
        for sm in docs_build/*/*/sitemap.xml; do
          if [ -f "$sm" ]; then
            relpath=${sm#docs_build/}
            echo "  <sitemap>" >> docs_build/sitemap_index.xml
            echo "    <loc>https://docs.forlinx.net/$relpath</loc>" >> docs_build/sitemap_index.xml
            echo "  </sitemap>" >> docs_build/sitemap_index.xml
          fi
        done

        echo '</sitemapindex>' >> docs_build/sitemap_index.xml

    # 13 添加 CNAME 文件（绑定自定义域名）
    - name: Add CNAME file
      run: echo "docs.forlinx.net" > ./docs_build/CNAME
      # 关键步骤：写入自定义域名到 docs_build/CNAME 文件
      # 这样 GitHub Pages 托管时会绑定这个域名，防止被部署覆盖删除

    # 14 部署到 GitHub Pages
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs_build
        publish_branch: gh-pages
